<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>StudentCrudOperation</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</head>
<body>
  <app-root></app-root>
</body>
</html>
----------------------------------------------------------------------------------------------
<nav class="navbar navbar-expand-lg navbar-light bg-primary ">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <h1 style="color: antiquewhite;">Student Database</h1>
        </a>

        <div class="d-flex">
            <button (click)="clickAddStudent()" type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">Add Student </button>
        </div>
    </div>
</nav>

<table class="table" >
    <thead>
        <tr align="center">
            <th scope="col">Student ID</th>
            <th scope="col">Name</th>
            <th scope="col">Branch</th>
            <th scope="col">University</th>
            <th scope="col">Mobile No</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let row of studentData" align="center" >
            <td>{{row.id}}</td>
            <td>{{row.name}}</td>
            <td>{{row.branch}}</td>
            <td>{{row.university}}</td>
            <td>{{row.mobileno}}</td>
            <td>
                <button (click)="onEdit(row)" type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" class="btn btn-info" style="color: white;">Edit</button>
                <button (click)="deleteStudent(row)" class="btn btn-danger mx-3"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg></button>
            </td>
        </tr>
    </tbody>
</table>

<!-- Button trigger modal -->


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> Student Details </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form [formGroup]="formValue">
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" formControlName="name" class="form-control" id="name">
                    </div>
                    <div class="mb-3">
                        <label for="branch" class="form-label">Branch</label>
                        <input type="text" formControlName="branch" class="form-control" id="branch">
                    </div>
                    <div class="mb-3">
                        <label for="university" class="form-label">University</label>
                        <input type="text" formControlName="university" class="form-control" id="university">
                    </div>
                    <div class="mb-3">
                        <label for="mobileno" class="form-label">Mobile No</label>
                        <input type="text" formControlName="mobileno" class="form-control" id="mobileno">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancel" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" *ngIf="showAdd"   (click)="postStudentDetails()" class="btn btn-primary">Add</button>
                <button type="button" *ngIf="showUpdate" (click)="updateStudentDetails()" class="btn btn-primary">Update</button>
            </div>
        </div>
    </div>
</div>

-------------------------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ApiService } from '../shared/api.service';
import { StudentModel } from './student-dashboard.model';
@Component({
  selector: 'app-student-dashboard',
  templateUrl: './student-dashboard.component.html',
  styleUrls: ['./student-dashboard.component.css']
})
export class StudentDashboardComponent implements OnInit {

  formValue !: FormGroup;
  studentModelObj: StudentModel = new StudentModel();
  studentData !: any;
  showAdd !: boolean;
  showUpdate !: boolean;


  constructor(private formbuilder: FormBuilder,
    private api: ApiService) { }

  ngOnInit(): void {
    this.formValue = this.formbuilder.group({
      name: [''],
      branch: [''],
      university: [''],
      mobileno: ['']
    })
    this.getAllStudent();

  }
  clickAddStudent() {
    this.formValue.reset();
    this.showAdd = true;
    this.showUpdate = false;
  }
  postStudentDetails() {
    this.studentModelObj.name = this.formValue.value.name;
    this.studentModelObj.branch = this.formValue.value.branch;
    this.studentModelObj.university = this.formValue.value.university;
    this.studentModelObj.mobileno = this.formValue.value.mobileno;

    this.api.postStudent(this.studentModelObj)
      .subscribe(res => {
        console.log(res);
        alert("Student Added Successfully")
        let ref = document.getElementById('cancel')
        ref?.click();
        this.formValue.reset();
        this.getAllStudent(); //for appending into list after adding student

      })
  }
  //display all student details that is updated
  getAllStudent() {
    this.api.getStudent()
      .subscribe(res => {
        this.studentData = res;
      })
  }
  deleteStudent(row: any) {
    this.api.deleteStudent(row.id)
      .subscribe(res => {

        alert("Student Deleted");
        this.getAllStudent();
      })
  }
  onEdit(row: any) {
    this.showAdd = false;
    this.showUpdate = true;
    this.studentModelObj.id = row.id;
    this.formValue.controls['name'].setValue(row.name);
    this.formValue.controls['branch'].setValue(row.branch);
    this.formValue.controls['university'].setValue(row.university);
    this.formValue.controls['mobileno'].setValue(row.mobileno);
  }
  updateStudentDetails() {
    this.studentModelObj.name = this.formValue.value.name;
    this.studentModelObj.branch = this.formValue.value.branch;
    this.studentModelObj.university = this.formValue.value.university;
    this.studentModelObj.mobileno = this.formValue.value.mobileno;

    this.api.updateStudent(this.studentModelObj, this.studentModelObj.id)
      .subscribe(res => {
        alert("Updated Successfully");
        let ref = document.getElementById('cancel')
        ref?.click();
        this.formValue.reset();
        this.getAllStudent();
      })
  }
}
--------------------------------------------------------------------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StudentDashboardComponent } from './student-dashboard.component';

describe('StudentDashboardComponent', () => {
  let component: StudentDashboardComponent;
  let fixture: ComponentFixture<StudentDashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ StudentDashboardComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(StudentDashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

------------------------------------------------------------------------------------------------------
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
------------------------------------------------------------------------------------------------
export class StudentModel{
    id: number = 0;
    name : string = '';
    branch : string = '';
    university : string = '';
    mobileno: string='';
}
-----------------------------------------------------------------------------------------
@media only screen and (max-width: 480px) {
   
       td{
            width:  20%;
            margin: 0px;
            padding: 0px;
            align-items: center;
          }
    
    }
